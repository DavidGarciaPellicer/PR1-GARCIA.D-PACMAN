using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Collections;

namespace PacManv2
{
    class Programa
    {
        /*La estrategia del juego es pintar una matriz de 50 por 70 y rellenarla con todos los
         elementos del juego
         
          Se ha conseguido que:
         +La matriz inicial se pinte
         +PAcMan(en este caso es un fantasma) se posicione en la matriz
         +PacMan se mueve por la matriz
         
         Problemas actualmente:
          -PacMan atraviesa los obstáculos en vez de hacer que se "choque" contra ellos
          -aún no he controlado excepciones que producen ArrayIndexOutOfBounds cuando PacMan se mueve por la matriz
          //sss
         */

        //variable con la que indicamos el tiempo al cual se irá actualizando nuestro juego
        const int PeriodoTiempo=8;
        //con esta variable indicamos si hay que salir del juego
        static bool Exit = false;
       
        //matriz donde vamos redibujando nuestro juego con todos sus elementos
       static string[,] matrizPantalla;
       //matriz que guarda las posiciones antes de realizar un movimiento
        //Si el movimiento no es válido(p.e, choca contra un obstáculo, pintaremos esta matriz y no matrizPantalla)
       static string[,] matrizPantallaAnterior;

       static int bolasComidas = 0;

       Modelo pacMan;
       int width;
       int height;
       int posX;
       int posY;

       int inicioX = 0;
       int inicioY = 0;

       static void Main()
       {
           Programa programa = new Programa();
           programa.Inicializar();
           programa.dibujarMatriz(matrizPantalla);
  
           //se llama al método actualizar cada a periodos de tiempo regulares
         //  var refrescarPantalla = new Timer(state => { programa.Actualizar(); }, null, 0, PeriodoTiempo*40);
           //Esperar a que se pulse la tecla de salida 
           while (true) { programa.Actualizar(); }
         //  while (!Exit) { }    
       }

       void Inicializar()
       {
           //rellena la matriz del juego sin PacMan ni fantasmas
           rellenarMatrizInicial();

           int posXInicioPacMan = 2;
           int posYInicioPacMan = 2;

           pacMan = new Modelo(posXInicioPacMan, posYInicioPacMan, ASCIIModels.PacMan);
           width = pacMan.Width;
           height = pacMan.Height;
           posX = pacMan.PosX;
           posY = pacMan.PosY;  
       }

       private void refrescarMatriz()
       {
           for (int i = 0; i < width; i++)
           {
               for (int j = 0; j < height; j++)
               {
                   matrizPantalla[i + posX, j + posY] = pacMan.ASCIIModel[inicioY, inicioX];
                   inicioX++;
               }
               inicioY++;
               inicioX = 0;
           }

           inicioX = 0;
           inicioY = 0;
       }

       //Actualizar el modelo segun las entradas del usuario mediante el teclado
        void Actualizar()
       { 
           int deltaX = 0;
           int deltaY = 0;
         
           if (Win32API.IsKeyPressed(ConsoleKey.RightArrow)) deltaY = 1;
           if (Win32API.IsKeyPressed(ConsoleKey.LeftArrow)) deltaY = -1;
           if (Win32API.IsKeyPressed(ConsoleKey.UpArrow)) deltaX = -1;
           if (Win32API.IsKeyPressed(ConsoleKey.DownArrow)) deltaX = 1;

           if (deltaX != 0 || deltaY != 0)
               pacMan.Mover(deltaX,deltaY);

           dibujarMatriz(rellenarMatriz(matrizPantalla));
       }

        private string[,] rellenarMatriz(string[,] matriz)
        {
            //si PacMan encuentra algún obstaculo lo indicaremos la variable de instancia del modelo haEncontradoObstaculo
            //si es true dibujará la matriz del movimiento anterior que es matrizPantallaAnterior
            
            //primero volvemos a dejar matrizPantalla como estaba originalmente(solamente el tablero sin personajes)
            rellenarMatrizInicial();
            //guardamos la matrizPantalla antes del movimiento, por si hay que volver a la posición inicial
            matrizPantallaAnterior = guardarMatrizAnterior(matrizPantalla);

            int posBolaX=0;
            int posBolaY=0;
            bool haComidoBola = false;

            //ahora ya recorremos la matrizPantalla y dibujamos a PacMan en las posiciones actualizadas
            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {
                    if (matrizPantalla[i + pacMan.PosX, j + pacMan.PosY] == "*")
                    {
                        bolasComidas++;
                        haComidoBola = true;
                        posBolaX=i + pacMan.PosX;
                        posBolaY=j + pacMan.PosY;

                    }
                    //si se encuentra con algún obstáculo cambiamos el valor de encontrarObstaculo
                    if (matrizPantalla[i + pacMan.PosX, j + pacMan.PosY] == "@")
                        pacMan.haEncontradoObstaculo = true;
                    //aquí falta controlar excepciones que se producen ya que i+pacMan.PosX ó j + pacMan.PosY
                    //producen desbordamiento en los índices de la matriz
                        matrizPantalla[i + pacMan.PosX, j + pacMan.PosY] = pacMan.ASCIIModel[inicioY, inicioX];
                        inicioX++;
                }
                inicioY++;
                inicioX = 0;
            }

            if (haComidoBola)
                matrizPantalla[posBolaX, posBolaY] = " ";

            inicioY = 0;
            inicioX = 0;

            //si encuentra un obstaculo devolvemos la matriz con la posiciones anteriores
            if (pacMan.haEncontradoObstaculo)
            {
                 pacMan.PosX = pacMan.InicialPosX;
                 pacMan.PosY = pacMan.InicialPosY;
             return  matrizPantallaAnterior;
            }
            return matrizPantalla;
        }

        //declara y rellena una matriz de 2 dimensiones  para dibujar el tablero del juego
        //el método devuelve esa matriz 
        static void rellenarMatrizInicial()
        {
     
            matrizPantalla = new string[,]{
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","*"," "," "," ","*"," "," "," ","*"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"}, //10
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@"," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},  //20
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"}, //30
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},                           
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"}, //40
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@"," "," "," "," ","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"},
                                {"@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@","@"} //50
        };
            //guardamos una copia 
            //y la copia se guarda por referencia, IMBÉCIL!!
            matrizPantallaAnterior = matrizPantalla;
        }


        //pinta el tablero

        void dibujarMatriz(string[,] matriz)
        {
            Console.Clear();

            for (int filas = 0; filas < matriz.GetLength(0); filas++)
                {
                    for (int cols = 0; cols < matriz.GetLength(1); cols++)
                    {

                        Console.Write(matriz[filas, cols]);

                    }

                    Console.WriteLine();
                }
        }

        string[,] guardarMatrizAnterior(string[,] matrizActual)
        {
            string[,] matrizAnterior = new string[matrizActual.GetLength(0),matrizActual.GetLength(1)];
            for (int i = 0; i < width; i++)
            {
                for (int j = 0; j < height; j++)
                {
                    matrizAnterior[i, j] = matrizActual[i, j];
                }

            }

            return matrizAnterior;
        }
    }
}
